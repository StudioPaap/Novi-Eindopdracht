{"ast":null,"code":"//\n// import React, { createContext, useState, useEffect } from 'react';\n// import { useHistory } from 'react-router-dom';\n// import jwt_decode from 'jwt-decode';\n// import axios from 'axios';\n// import isTokenValid from \"../Helpers/isTokenValid\";\n//\n//\n// export const AuthContext = createContext({});\n//\n// function AuthContextProvider({ children }) {\n//     const [isAuth, toggleIsAuth] = useState({\n//         isAuth: false,\n//         user: null,\n//         status: 'pending',\n//     });\n//\n//     const history = useHistory();\n//\n//     useEffect(() => {\n//         const token = localStorage.getItem('token');\n//         if (token && isTokenValid()) {\n//             const decoded = jwt_decode(token);\n//             fetchUserData(decoded.sub, token);\n//         } else {\n//             toggleIsAuth({\n//                 isAuth: false,\n//                 user: null,\n//                 status: 'done',\n//             });\n//         }\n//     }, []);\n//\n//\n//     function login(JWT) {\n//         localStorage.setItem('token', JWT);\n//         const decoded = jwt_decode(JWT);\n//         fetchUserData(decoded.sub, JWT, '/dashboard');\n//\n//     }\n//\n//\n//     function logout() {\n//         localStorage.clear();\n//         toggleIsAuth({\n//             isAuth: false,\n//             user: null,\n//             status: 'done',\n//         });\n//\n//         console.log('Gebruiker is uitgelogd!');\n//         history.push('/inlog');\n//     }\n//\n//     async function fetchUserData(id, token, redirectUrl) {\n//         try {\n//\n//             const result = await axios.post(`https://frontend-educational-backend.herokuapp.com/api/auth/signin`, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${token}`,\n//                 },\n//             });\n//\n//             toggleIsAuth({\n//                 ...isAuth,\n//                 isAuth: true,\n//                 user: {\n//                     username: result.data.username,\n//                     email: result.data.email,\n//                     id: result.data.id,\n//                 },\n//                 status: 'done',\n//             });\n//\n//             // als er een redirect URL is meegegeven (bij het mount-effect doen we dit niet) linken we hiernnaartoe door\n//             // als we de history.push in de login-functie zouden zetten, linken we al door voor de gebuiker is opgehaald!\n//             if (redirectUrl) {\n//                 history.push(redirectUrl);\n//             }\n//\n//         } catch (e) {\n//             console.error(e);\n//             toggleIsAuth({\n//                 isAuth: false,\n//                 user: null,\n//                 status: 'done',\n//             });\n//         }\n//     }\n//\n//     const contextData = {\n//         isAuth: isAuth.isAuth,\n//         user: isAuth.user,\n//         login: login,\n//         logout: logout,\n//     };\n//\n//\n//     return (\n//         <AuthContext.Provider value={contextData}>\n//             {isAuth.status === 'done' ? children : <p>Loading...</p>}\n//         </AuthContext.Provider>\n//     );\n// }\n//\n// export default AuthContextProvider;","map":{"version":3,"names":[],"sources":["/Users/anoukpaap/Desktop/opdracht-novi/src/context/AuthContext.js"],"sourcesContent":["//\n// import React, { createContext, useState, useEffect } from 'react';\n// import { useHistory } from 'react-router-dom';\n// import jwt_decode from 'jwt-decode';\n// import axios from 'axios';\n// import isTokenValid from \"../Helpers/isTokenValid\";\n//\n//\n// export const AuthContext = createContext({});\n//\n// function AuthContextProvider({ children }) {\n//     const [isAuth, toggleIsAuth] = useState({\n//         isAuth: false,\n//         user: null,\n//         status: 'pending',\n//     });\n//\n//     const history = useHistory();\n//\n//     useEffect(() => {\n//         const token = localStorage.getItem('token');\n//         if (token && isTokenValid()) {\n//             const decoded = jwt_decode(token);\n//             fetchUserData(decoded.sub, token);\n//         } else {\n//             toggleIsAuth({\n//                 isAuth: false,\n//                 user: null,\n//                 status: 'done',\n//             });\n//         }\n//     }, []);\n//\n//\n//     function login(JWT) {\n//         localStorage.setItem('token', JWT);\n//         const decoded = jwt_decode(JWT);\n//         fetchUserData(decoded.sub, JWT, '/dashboard');\n//\n//     }\n//\n//\n//     function logout() {\n//         localStorage.clear();\n//         toggleIsAuth({\n//             isAuth: false,\n//             user: null,\n//             status: 'done',\n//         });\n//\n//         console.log('Gebruiker is uitgelogd!');\n//         history.push('/inlog');\n//     }\n//\n//     async function fetchUserData(id, token, redirectUrl) {\n//         try {\n//\n//             const result = await axios.post(`https://frontend-educational-backend.herokuapp.com/api/auth/signin`, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${token}`,\n//                 },\n//             });\n//\n//             toggleIsAuth({\n//                 ...isAuth,\n//                 isAuth: true,\n//                 user: {\n//                     username: result.data.username,\n//                     email: result.data.email,\n//                     id: result.data.id,\n//                 },\n//                 status: 'done',\n//             });\n//\n//             // als er een redirect URL is meegegeven (bij het mount-effect doen we dit niet) linken we hiernnaartoe door\n//             // als we de history.push in de login-functie zouden zetten, linken we al door voor de gebuiker is opgehaald!\n//             if (redirectUrl) {\n//                 history.push(redirectUrl);\n//             }\n//\n//         } catch (e) {\n//             console.error(e);\n//             toggleIsAuth({\n//                 isAuth: false,\n//                 user: null,\n//                 status: 'done',\n//             });\n//         }\n//     }\n//\n//     const contextData = {\n//         isAuth: isAuth.isAuth,\n//         user: isAuth.user,\n//         login: login,\n//         logout: logout,\n//     };\n//\n//\n//     return (\n//         <AuthContext.Provider value={contextData}>\n//             {isAuth.status === 'done' ? children : <p>Loading...</p>}\n//         </AuthContext.Provider>\n//     );\n// }\n//\n// export default AuthContextProvider;"],"mappings},"metadata":{},"sourceType":"module"}